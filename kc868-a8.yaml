substitutions:
  name: kc868-a8

esphome:
  name: ${name}
  name_add_mac_suffix: true
  project:
    name: kincony.kc868-a8
    version: "1"

esp32:
  board: esp32dev
  framework:
    type: arduino

web_server:
  port: 80

dashboard_import:
  package_import_url: github://hzkincony/kc868-a8/kc868-a8.yaml@main

ota:
  - platform: esphome
    password: "bobthebuilder"

# I2C
i2c:
  sda: 4
  scl: 5
  scan: true
  id: bus_a

# Ethernet (new 'clk' style)
ethernet:
  type: LAN8720
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk:
    pin: GPIO17
    mode: CLK_OUT
  phy_addr: 0

# ---------- 433 MHz RF ----------
remote_receiver:
  pin: GPIO2
  dump:
    - rc_switch
    - raw
  tolerance: 50%
  filter: 250us
  idle: 4ms
  on_rc_switch:
    then:
      - if:
          condition:
            lambda: 'return id(is_learning) && id(rf_protocol_select).state == "Auto (rc_switch)";'
          then:
            - lambda: |-
                id(learned_code) = x.code;
                uint8_t bits = 64 - __builtin_clzll(x.code);
                if (bits == 0) bits = id(learned_bits);
                id(learned_bits) = bits;
                std::string s; s.reserve(bits);
                for (int i = bits - 1; i >= 0; --i)
                  s.push_back((x.code & (1ULL << i)) ? '1' : '0');
                id(learned_bin) = s;
                id(learned_type) = std::string("rc_switch");
                ESP_LOGI("rf", "Learned rc_switch: code=%llu bits=%u",
                         (unsigned long long) id(learned_code), id(learned_bits));
            - lambda: 'id(is_learning) = false;'
            - switch.turn_off: relay8

  on_raw:
    then:
      - if:
          condition:
            lambda: 'return id(is_learning) && id(rf_protocol_select).state == "Raw";'
          then:
            - lambda: |-
                id(learned_raw).clear();
                id(learned_raw).reserve(x.size());
                for (auto v : x) id(learned_raw).push_back(v);
                id(learned_type) = std::string("raw");
                ESP_LOGI("rf", "Learned RAW timings: count=%u", (unsigned) id(learned_raw).size());
            - lambda: 'id(is_learning) = false;'
            - switch.turn_off: relay8

remote_transmitter:
  pin: GPIO15
  carrier_duty_percent: 100%

# Persist / runtime storage
globals:
  - id: is_learning
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: learned_type
    type: std::string
    restore_value: yes
    initial_value: '"none"'

  - id: learned_code
    type: uint64_t
    restore_value: yes
    initial_value: '0'

  - id: learned_bits
    type: uint8_t
    restore_value: yes
    initial_value: '24'

  - id: learned_bin
    type: std::string
    restore_value: yes
    initial_value: '""'

  - id: learned_raw
    type: std::vector<int32_t>
    restore_value: no
    initial_value: 'std::vector<int32_t>()'

# ---------- UI controls ----------
select:
  - platform: template
    id: rf_protocol_select
    name: "RF Protocol"
    optimistic: true
    options:
      - "Auto (rc_switch)"
      - "Protocol 1"
      - "Protocol 2"
      - "Protocol 3"
      - "Protocol 4"
      - "Protocol 5"
      - "Protocol 6"
      - "Raw"
    initial_option: "Auto (rc_switch)"

  - platform: template
    id: rf_pulse_preset
    name: "RF Pulse Preset"
    optimistic: true
    options:
      - "300"
      - "350"
      - "433"
    initial_option: "350"

text_sensor:
  - platform: template
    id: learned_status
    name: "RF Learned Status"
    update_interval: 2s
    lambda: |-
      if (id(learned_type) == "rc_switch" && id(learned_bin).size() > 0) {
        char buf[64];
        snprintf(buf, sizeof(buf), "rc_switch: bits=%u code=%llu",
                 id(learned_bits), (unsigned long long) id(learned_code));
        return std::string(buf);
      } else if (id(learned_type) == "raw" && !id(learned_raw).empty()) {
        char buf[64];
        snprintf(buf, sizeof(buf), "raw: %u timings", (unsigned) id(learned_raw).size());
        return std::string(buf);
      }
      return std::string("none");

# ---------- PCF8574 expanders ----------
pcf8574:
  - id: pcf8574_hub_out_1
    address: 0x24
  - id: pcf8574_hub_in_1
    address: 0x22

# ---------- Relays (active-low) ----------
switch:
  - platform: gpio
    id: relay1
    name: "relay1"
    pin: { pcf8574: pcf8574_hub_out_1, number: 0, inverted: true }

  - platform: gpio
    id: relay2
    name: "relay2"
    pin: { pcf8574: pcf8574_hub_out_1, number: 1, inverted: true }

  - platform: gpio
    id: relay3
    name: "relay3"
    pin: { pcf8574: pcf8574_hub_out_1, number: 2, inverted: true }

  - platform: gpio
    id: relay4
    name: "relay4"
    pin: { pcf8574: pcf8574_hub_out_1, number: 3, inverted: true }

  - platform: gpio
    id: relay5
    name: "relay5"
    pin: { pcf8574: pcf8574_hub_out_1, number: 4, inverted: true }

  - platform: gpio
    id: relay6
    name: "relay6"
    pin: { pcf8574: pcf8574_hub_out_1, number: 5, inverted: true }

  - platform: gpio
    id: relay7
    name: "relay7"
    pin: { pcf8574: pcf8574_hub_out_1, number: 6, inverted: true }

  - platform: gpio
    id: relay8
    name: "relay8 (learning indicator)"
    pin: { pcf8574: pcf8574_hub_out_1, number: 7, inverted: true }

# ---------- Analog thresholds ----------
sensor:
  - platform: adc
    id: a1_volts
    name: "A1 Voltage"
    pin: GPIO34
    attenuation: 12db
    update_interval: 300ms
    filters:
      - median: { window_size: 5, send_every: 2, send_first_at: 1 }
      - calibrate_linear:
          - 0.00 -> 0.00
          - 3.30 -> 5.00
    on_value_range:
      - above: 2.05
        then:
          - if:
              condition: { not: { switch.is_on: relay1 } }
              then:
                - switch.turn_on: relay1
      - below: 1.95
        then:
          - if:
              condition: { switch.is_on: relay1 }
              then:
                - switch.turn_off: relay1

  - platform: adc
    id: a2_volts
    name: "A2 Voltage"
    pin: GPIO35
    attenuation: 12db
    update_interval: 300ms
    filters:
      - throttle: 1s
      - median: { window_size: 5, send_every: 2, send_first_at: 1 }
      - calibrate_linear:
          - 0.00 -> 0.00
          - 3.30 -> 5.00
    on_value_range:
      - above: 2.05
        then:
          - script.execute: send_learned_rf

# ---------- Digital inputs ----------
binary_sensor:
  - platform: gpio
    id: input1
    name: "input1 (learn RF)"
    pin: { pcf8574: pcf8574_hub_in_1, number: 0, inverted: true }
    filters: [ delayed_on_off: 20ms ]
    on_press:
      - script.execute: start_learning

  - platform: gpio
    id: input2
    name: "input2"
    pin: { pcf8574: pcf8574_hub_in_1, number: 1, inverted: true }
    filters: [ delayed_on_off: 20ms ]

  - platform: gpio
    id: input3
    name: "input3"
    pin: { pcf8574: pcf8574_hub_in_1, number: 2, inverted: true }
    filters: [ delayed_on_off: 20ms ]

  - platform: gpio
    id: input4
    name: "input4"
    pin: { pcf8574: pcf8574_hub_in_1, number: 3, inverted: true }
    filters: [ delayed_on_off: 20ms ]

  - platform: gpio
    id: input5
    name: "input5"
    pin: { pcf8574: pcf8574_hub_in_1, number: 4, inverted: true }
    filters: [ delayed_on_off: 20ms ]

  - platform: gpio
    id: input6
    name: "input6"
    pin: { pcf8574: pcf8574_hub_in_1, number: 5, inverted: true }
    filters: [ delayed_on_off: 20ms ]

  - platform: gpio
    id: input7
    name: "input7"
    pin: { pcf8574: pcf8574_hub_in_1, number: 6, inverted: true }
    filters: [ delayed_on_off: 20ms ]

  - platform: gpio
    id: input8
    name: "input8"
    pin: { pcf8574: pcf8574_hub_in_1, number: 7, inverted: true }
    filters: [ delayed_on_off: 20ms ]

# ---------- Web UI buttons ----------
button:
  - platform: template
    name: "Start RF learning (UI)"
    on_press:
      - script.execute: start_learning

  - platform: template
    name: "Transmit learned 433"
    on_press:
      - script.execute: send_learned_rf

# ---------- Scripts ----------
script:
  # Enter learning window (15 s)
  - id: start_learning
    mode: restart
    then:
      - lambda: 'id(is_learning) = true;'
      - switch.turn_on: relay8
      - lambda: |-
          ESP_LOGI("rf", "Learning mode: %s (15s)", id(rf_protocol_select).state.c_str());
      - delay: 15s
      - if:
          condition:
            lambda: 'return id(is_learning);'
          then:
            - lambda: 'id(is_learning) = false;'
            - switch.turn_off: relay8
            - lambda: 'ESP_LOGW("rf", "Learning timed out.");'

  # Send learned RF (no templating inside protocol:)
  - id: send_learned_rf
    mode: queued
    then:
      # RAW branch first
      - if:
          condition:
            lambda: 'return id(rf_protocol_select).state == "Raw";'
          then:
            - if:
                condition:
                  lambda: 'return !id(learned_raw).empty();'
                then:
                  - remote_transmitter.transmit_raw:
                      code: !lambda 'return id(learned_raw);'
                      repeat: 10
                else:
                  - logger.log: "No RAW timing learned."
          else:
            # Non-raw: need an rc_switch bitstring
            - if:
                condition:
                  lambda: 'return id(learned_bin).size() > 0;'
                then:
                  # ---- Auto (Protocol 1 timings) with pulse preset ----
                  - if:
                      condition:
                        lambda: 'return id(rf_protocol_select).state == "Auto (rc_switch)";'
                      then:
                        - if:
                            condition: { lambda: 'return id(rf_pulse_preset).state == "300";' }
                            then:
                              - remote_transmitter.transmit_rc_switch_raw:
                                  code: !lambda 'return id(learned_bin);'
                                  protocol: { pulse_length: 300, sync: [1,31], zero: [1,3], one: [3,1] }
                                  repeat: 10
                            else:
                              - if:
                                  condition: { lambda: 'return id(rf_pulse_preset).state == "433";' }
                                  then:
                                    - remote_transmitter.transmit_rc_switch_raw:
                                        code: !lambda 'return id(learned_bin);'
                                        protocol: { pulse_length: 433, sync: [1,31], zero: [1,3], one: [3,1] }
                                        repeat: 10
                                  else:
                                    - remote_transmitter.transmit_rc_switch_raw:
                                        code: !lambda 'return id(learned_bin);'
                                        protocol: { pulse_length: 350, sync: [1,31], zero: [1,3], one: [3,1] }
                                        repeat: 10
                      else:
                        # ---- Protocol 1 .. 6 with pulse preset ----
                        - if:
                            condition: { lambda: 'return id(rf_protocol_select).state == "Protocol 1";' }
                            then:
                              - if:
                                  condition: { lambda: 'return id(rf_pulse_preset).state == "300";' }
                                  then:
                                    - remote_transmitter.transmit_rc_switch_raw:
                                        code: !lambda 'return id(learned_bin);'
                                        protocol: { pulse_length: 300, sync: [1,31], zero: [1,3], one: [3,1] }
                                        repeat: 10
                                  else:
                                    - if:
                                        condition: { lambda: 'return id(rf_pulse_preset).state == "433";' }
                                        then:
                                          - remote_transmitter.transmit_rc_switch_raw:
                                              code: !lambda 'return id(learned_bin);'
                                              protocol: { pulse_length: 433, sync: [1,31], zero: [1,3], one: [3,1] }
                                              repeat: 10
                                        else:
                                          - remote_transmitter.transmit_rc_switch_raw:
                                              code: !lambda 'return id(learned_bin);'
                                              protocol: { pulse_length: 350, sync: [1,31], zero: [1,3], one: [3,1] }
                                              repeat: 10

                            else:
                              - if:
                                  condition: { lambda: 'return id(rf_protocol_select).state == "Protocol 2";' }
                                  then:
                                    - if:
                                        condition: { lambda: 'return id(rf_pulse_preset).state == "300";' }
                                        then:
                                          - remote_transmitter.transmit_rc_switch_raw:
                                              code: !lambda 'return id(learned_bin);'
                                              protocol: { pulse_length: 300, sync: [1,10], zero: [1,2], one: [2,1] }
                                              repeat: 10
                                        else:
                                          - if:
                                              condition: { lambda: 'return id(rf_pulse_preset).state == "433";' }
                                              then:
                                                - remote_transmitter.transmit_rc_switch_raw:
                                                    code: !lambda 'return id(learned_bin);'
                                                    protocol: { pulse_length: 433, sync: [1,10], zero: [1,2], one: [2,1] }
                                                    repeat: 10
                                              else:
                                                - remote_transmitter.transmit_rc_switch_raw:
                                                    code: !lambda 'return id(learned_bin);'
                                                    protocol: { pulse_length: 350, sync: [1,10], zero: [1,2], one: [2,1] }
                                                    repeat: 10

                                  else:
                                    - if:
                                        condition: { lambda: 'return id(rf_protocol_select).state == "Protocol 3";' }
                                        then:
                                          - if:
                                              condition: { lambda: 'return id(rf_pulse_preset).state == "300";' }
                                              then:
                                                - remote_transmitter.transmit_rc_switch_raw:
                                                    code: !lambda 'return id(learned_bin);'
                                                    protocol: { pulse_length: 300, sync: [30,71], zero: [4,11], one: [9,6] }
                                                    repeat: 10
                                              else:
                                                - if:
                                                    condition: { lambda: 'return id(rf_pulse_preset).state == "433";' }
                                                    then:
                                                      - remote_transmitter.transmit_rc_switch_raw:
                                                          code: !lambda 'return id(learned_bin);'
                                                          protocol: { pulse_length: 433, sync: [30,71], zero: [4,11], one: [9,6] }
                                                          repeat: 10
                                                    else:
                                                      - remote_transmitter.transmit_rc_switch_raw:
                                                          code: !lambda 'return id(learned_bin);'
                                                          protocol: { pulse_length: 350, sync: [30,71], zero: [4,11], one: [9,6] }
                                                          repeat: 10

                                        else:
                                          - if:
                                              condition: { lambda: 'return id(rf_protocol_select).state == "Protocol 4";' }
                                              then:
                                                - if:
                                                    condition: { lambda: 'return id(rf_pulse_preset).state == "300";' }
                                                    then:
                                                      - remote_transmitter.transmit_rc_switch_raw:
                                                          code: !lambda 'return id(learned_bin);'
                                                          protocol: { pulse_length: 300, sync: [1,6], zero: [1,3], one: [3,1] }
                                                          repeat: 10
                                                    else:
                                                      - if:
                                                          condition: { lambda: 'return id(rf_pulse_preset).state == "433";' }
                                                          then:
                                                            - remote_transmitter.transmit_rc_switch_raw:
                                                                code: !lambda 'return id(learned_bin);'
                                                                protocol: { pulse_length: 433, sync: [1,6], zero: [1,3], one: [3,1] }
                                                                repeat: 10
                                                          else:
                                                            - remote_transmitter.transmit_rc_switch_raw:
                                                                code: !lambda 'return id(learned_bin);'
                                                                protocol: { pulse_length: 350, sync: [1,6], zero: [1,3], one: [3,1] }
                                                                repeat: 10

                                              else:
                                                - if:
                                                    condition: { lambda: 'return id(rf_protocol_select).state == "Protocol 5";' }
                                                    then:
                                                      - if:
                                                          condition: { lambda: 'return id(rf_pulse_preset).state == "300";' }
                                                          then:
                                                            - remote_transmitter.transmit_rc_switch_raw:
                                                                code: !lambda 'return id(learned_bin);'
                                                                protocol: { pulse_length: 300, sync: [6,14], zero: [1,2], one: [2,1] }
                                                                repeat: 10
                                                          else:
                                                            - if:
                                                                condition: { lambda: 'return id(rf_pulse_preset).state == "433";' }
                                                                then:
                                                                  - remote_transmitter.transmit_rc_switch_raw:
                                                                      code: !lambda 'return id(learned_bin);'
                                                                      protocol: { pulse_length: 433, sync: [6,14], zero: [1,2], one: [2,1] }
                                                                      repeat: 10
                                                                else:
                                                                  - remote_transmitter.transmit_rc_switch_raw:
                                                                      code: !lambda 'return id(learned_bin);'
                                                                      protocol: { pulse_length: 350, sync: [6,14], zero: [1,2], one: [2,1] }
                                                                      repeat: 10

                                                    else:
                                                      - if:
                                                          condition: { lambda: 'return id(rf_protocol_select).state == "Protocol 6";' }
                                                          then:
                                                            - if:
                                                                condition: { lambda: 'return id(rf_pulse_preset).state == "300";' }
                                                                then:
                                                                  - remote_transmitter.transmit_rc_switch_raw:
                                                                      code: !lambda 'return id(learned_bin);'
                                                                      protocol: { pulse_length: 300, sync: [1,23], zero: [1,2], one: [2,1] }
                                                                      repeat: 10
                                                                else:
                                                                  - if:
                                                                      condition: { lambda: 'return id(rf_pulse_preset).state == "433";' }
                                                                      then:
                                                                        - remote_transmitter.transmit_rc_switch_raw:
                                                                            code: !lambda 'return id(learned_bin);'
                                                                            protocol: { pulse_length: 433, sync: [1,23], zero: [1,2], one: [2,1] }
                                                                            repeat: 10
                                                                      else:
                                                                        - remote_transmitter.transmit_rc_switch_raw:
                                                                            code: !lambda 'return id(learned_bin);'
                                                                            protocol: { pulse_length: 350, sync: [1,23], zero: [1,2], one: [2,1] }
                                                                            repeat: 10
                else:
                  - logger.log: "No rc_switch code learned."

# Logging / API
logger:
  level: DEBUG
api:
